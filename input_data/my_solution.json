{
    "python": {
        "HumanEval/0": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "HumanEval/1": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.replace(\" \", \"\")\n    for ch in parens:\n        if ch == \"(\":\n            stk.append(ch)\n            current_group += ch\n        elif ch == \")\":\n            stk.pop()\n            current_group += ch\n            if not stk:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups",
        "HumanEval/2": "def truncate_number(num: float) -> float:\n    return num - floor(num)",
        "HumanEval/3": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "HumanEval/4": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers)\n    return deviation / len(numbers)",
        "HumanEval/5": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result",
        "HumanEval/6": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        max_depth = 0\n        depth = 0\n        for ch in group:\n            if ch == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif ch == \")\":\n                depth -= 1\n        result.append(max_depth)\n    return result",
        "HumanEval/7": "def filter_by_substring(strs: List[str], substring: str) -> List[str]:\n    return [s for s in strs if substring in s]",
        "HumanEval/8": "def sum_product(numbers: List[int]) -> List[int]:\n    n_sum = sum(numbers)\n    n_product = reduce(lambda x, y: x * y, numbers, 1)\n    return [n_sum, n_product]",
        "HumanEval/9": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float(\"-inf\")\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result",
        "HumanEval/10": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef make_palindrome(s: str) -> str:\n    if is_palindrome(s):\n        return s\n    for i in range(len(s)):\n        if is_palindrome(s[i:]):\n            return s + s[:i][::-1]\n    return \"\"",
        "HumanEval/11": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])",
        "HumanEval/12": "def longest(strs: List[str]) -> Optional[str]:\n    if not strs:\n        return None\n    longest_s = strs[0]\n    for s in strs:\n        if len(s) > len(longest_s):\n            longest_s = s\n    return longest_s",
        "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "HumanEval/14": "def all_prefixes(s: str) -> List[str]:\n    prefixes = []\n    for i in range(len(s)):\n        prefixes.append(s[: i + 1])\n    return prefixes",
        "HumanEval/15": "def string_sequence(n: int) -> str:\n    return \" \".join([str(i) for i in range(n + 1)])",
        "HumanEval/16": "def count_distinct_characters(s: str) -> int:\n    return len(set(s.lower()))",
        "HumanEval/17": "def parse_music(music_string: str) -> List[int]:\n    durations = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]",
        "HumanEval/18": "def how_many_times(s: str, substring: str) -> int:\n    times = 0\n    for i in range(len(s) - len(substring) + 1):\n        if s[i : i + len(substring)] == substring:\n            times += 1\n    return times",
        "HumanEval/19": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list = list(filter(lambda x: x in num_dict, numbers.split(\" \")))\n    num_list.sort(key=lambda x: num_dict[x])\n    return \" \".join(num_list)",
        "HumanEval/20": "def find_closest_elements(numbers: List[float]) -> List[float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = []\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n    return closest_pair",
        "HumanEval/21": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]",
        "HumanEval/22": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
        "HumanEval/23": "def str_length(s: str) -> int:\n    return len(s)",
        "HumanEval/24": "def largest_divisor(n: int) -> int:\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n    return 1",
        "HumanEval/25": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors",
        "HumanEval/26": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    res = [num for num in numbers if counts[num] == 1]\n    return res",
        "HumanEval/27": "def flip_case(s: str) -> str:\n    flipped = []\n    for ch in s:\n        if not ch.isalpha():\n            flipped.append(ch)\n        elif ch.islower():\n            flipped.append(ch.upper())\n        elif ch.isupper():\n            flipped.append(ch.lower())\n    return ''.join(flipped)",
        "HumanEval/28": "def concatenate(strs: List[str]) -> str:\n    return \"\".join(strs)",
        "HumanEval/29": "def filter_by_prefix(strs: List[str], prefix_str: str) -> List[str]:\n    return [s for s in strs if s.startswith(prefix_str)]",
        "HumanEval/30": "def get_positive(l: List[int]) -> List[int]:\n    return [num for num in l if num > 0]",
        "HumanEval/31": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "HumanEval/32": "def poly(xs: List[int], x: float) -> float:\n    res = 0.0\n    for i in range(len(xs)):\n        res += xs[i] * x**i\n    return res\ndef find_zero(xs: List[int]) -> float:\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0:\n        x1 *= 2\n        x2 *= 2\n    while abs(x1 - x2) > 1e-10:\n        mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, x1) < 0:\n            x2 = mid\n        else:\n            x1 = mid\n    return (x1 + x2) / 2",
        "HumanEval/33": "def sort_third(l: List[int]) -> List[int]:\n    sorted_third = sorted(l[::3])\n    return [sorted_third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]",
        "HumanEval/34": "def list_unique(l: List[int]) -> List[int]:\n    return sorted(list(set(l)))",
        "HumanEval/35": "def max_element(l: List[int]) -> int:\n    if not l:\n        return 0\n    return max(l)",
        "HumanEval/36": "def fizz_buzz(n: int) -> int:\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += str(i).count(\"7\")\n    return cnt",
        "HumanEval/37": "def sort_even(l: List[int]) -> List[int]:\n    sorted_even = sorted(l[::2])\n    return [sorted_even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
        "HumanEval/38": "def encode_cyclic(s: str) -> str:\n    result = []\n    for i in range(0, len(s), 3):\n        if i + 3 > len(s):\n            result.append(s[i:])\n        else:\n            result.append(s[i+1:i+3])\n            result.append(s[i])\n    return \"\".join(result)\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))",
        "HumanEval/39": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    f = [0, 1]\n    cnt = 0\n    while cnt < n:\n        f = [f[1], f[0] + f[1]]\n        if is_prime(f[1]):\n            cnt += 1\n    return f[1]",
        "HumanEval/40": "def triples_sum_to_zero(l: List[int]) -> bool:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "HumanEval/41": "def car_race_collision(n: int) -> int:\n    return n ** 2",
        "HumanEval/42": "def incr_list(l: List[int]) -> List[int]:\n    return [i + 1 for i in l]",
        "HumanEval/43": "def pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "HumanEval/44": "def change_base(x: int, bas: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % bas))\n        x //= bas\n    return \"\".join(digits[::-1])",
        "HumanEval/45": "def triangle_area(a: int, h: int) -> float:\n    return a * h / 2",
        "HumanEval/46": "def fib4(n: int) -> int:\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib[i % 4] = sum(fib)\n    return fib[n % 4]",
        "HumanEval/47": "def median(l: List[float]) -> float:\n    sl = sorted(l)\n    if len(l) % 2 != 0:\n        return sl[len(l) // 2]\n    else:\n        return (sl[len(l) // 2] + sl[len(l) // 2 - 1]) / 2",
        "HumanEval/48": "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]",
        "HumanEval/49": "def modp(n: int, p: int) -> int:\n    ret = 1\n    for _ in range(n):\n        ret = (ret * 2) % p\n    return ret",
        "HumanEval/50": "def encode_shift(s: str) -> str:\n    result = [chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s]\n    return \"\".join(result)\ndef decode_shift(s: str) -> str:\n    result = [chr(((ord(ch) - 97 + 21) % 26) + 97) for ch in s]\n    return \"\".join(result)",
        "HumanEval/51": "def remove_vowels(txt: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in txt if char not in vowels])",
        "HumanEval/52": "def below_threshold(l: List[int], t: int) -> bool:\n    return all(x < t for x in l)",
        "HumanEval/53": "def add(x: int, y: int) -> int:\n    return x + y",
        "HumanEval/54": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)",
        "HumanEval/55": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
        "HumanEval/56": "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "HumanEval/57": "def monotonic(l: List[int]) -> bool:\n    diff = [y - x for x, y in zip(l, l[1:])]\n    return all(x <= 0 for x in diff) or all(x >= 0 for x in diff)",
        "HumanEval/58": "def common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))",
        "HumanEval/59": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "HumanEval/60": "def sum_to_n(n: int) -> int:\n    return sum(range(n + 1))",
        "HumanEval/61": "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "HumanEval/62": "def derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]",
        "HumanEval/63": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0 \n    a, b, c = 0, 0, 1\n    while n > 2:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c",
        "HumanEval/64": "def vowels_count(s: str) -> int:\n    vowels = \"aeiou\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s) - 1 and s[i].lower() == \"y\"):\n            cnt += 1\n    return cnt",
        "HumanEval/65": "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "HumanEval/66": "def digit_sum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())",
        "HumanEval/67": "def fruit_distribution(s: str, n: int) -> int:\n    words = s.split(' ')\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges",
        "HumanEval/68": "def pluck(arr: List[int]) -> List[int]:\n    evens = [n for n in arr if n % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
        "HumanEval/69": "def search(lst: List[int]) -> int:\n    freqs = {}\n    for n in lst:\n        freqs[n] = freqs.get(n, 0) + 1\n    good_vals = [k for k, v in freqs.items() if v >= k]\n    return max(good_vals, default=-1)",
        "HumanEval/70": "def strange_sort_list(lst: List[int]) -> List[int]:\n    sl = sorted(lst)\n    result = []\n    left, right = 0, len(sl) - 1\n    while left <= right:\n        result.append(sl[left])\n        left += 1\n        if left <= right:\n            result.append(sl[right])\n            right -= 1\n    return result",
        "HumanEval/71": "def triangle_area(a: int, b: int, c: int) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    else:\n        return -1.0",
        "HumanEval/72": "def will_it_fly(q: List[int], w: int) -> bool:\n    if len(q) == 0:\n        return False\n    is_palin = all(q[i] == q[len(q) - i - 1] for i in range(len(q)))\n    total = sum(q)\n    return is_palin and total <= w",
        "HumanEval/73": "def smallest_change(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans",
        "HumanEval/74": "def total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    cnt1 = sum(len(s) for s in lst1)\n    cnt2 = sum(len(s) for s in lst2)\n    return lst1 if cnt1 <= cnt2 else lst2",
        "HumanEval/75": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a: int) -> bool:\n    cnt = 0\n    for i in range(2, a + 1):\n        if is_prime(i):\n            while a % i == 0:\n                cnt += 1\n                a /= i\n    return cnt == 3",
        "HumanEval/76": "def is_simple_power(x: int, n: int) -> bool:\n    if n < 2:\n        return x == n\n    tmp = 1\n    while tmp < x:\n        tmp *= n\n    return tmp == x",
        "HumanEval/77": "def is_cube(a: int) -> bool:\n    a = abs(a)\n    root = int(round(pow(a, 1.0 / 3.0)))\n    return root * root * root == a  ",
        "HumanEval/78": "def hex_key(num: str) -> int:\n    return len([x for x in num if x in \"2357BD\"])",
        "HumanEval/79": "def decimal_to_binary(dec: int) -> str:\n    binary = bin(dec)[2:]\n    return f\"db{binary}db\"",
        "HumanEval/80": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "HumanEval/81": "def numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append(\"A+\")\n        elif g > 3.7:\n            result.append(\"A\")\n        elif g > 3.3:\n            result.append(\"A-\")\n        elif g > 3.0:\n            result.append(\"B+\")\n        elif g > 2.7:\n            result.append(\"B\")\n        elif g > 2.3:\n            result.append(\"B-\")\n        elif g > 2.0:\n            result.append(\"C+\")\n        elif g > 1.7:\n            result.append(\"C\")\n        elif g > 1.3:\n            result.append(\"C-\")\n        elif g > 1.0:\n            result.append(\"D+\")\n        elif g > 0.7:\n            result.append(\"D\")\n        elif g > 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result",
        "HumanEval/82": "def prime_length(s: str) -> bool:\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, floor(sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True",
        "HumanEval/83": "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 9 * (10 ** (n - 2))",
        "HumanEval/84": "def solve(n: int) -> str:\n    digits_sum = sum(int(d) for d in str(n))\n    return bin(digits_sum)[2:]",
        "HumanEval/85": "def add(lst: List[int]) -> int:\n    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])",
        "HumanEval/86": "def anti_shuffle(s: str) -> str:\n    words = [\"\".join(sorted(list(word))) for word in s.split(\" \")]\n    return \" \".join(words)",
        "HumanEval/87": "def get_row(lst: List[List[int]], x: int) -> List[List[int]]:\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append([i, j])\n    return sorted(coords, key=lambda a: (a[0], -a[1]))",
        "HumanEval/88": "def sort_array(arr: List[int]) -> List[int]:\n    if len(arr) == 0:\n        return []\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)",
        "HumanEval/89": "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted = ord(ch) + 4\n        if shifted > ord('z'):\n            shifted -= 26\n        result.append(chr(shifted))\n    return \"\".join(result)",
        "HumanEval/90": "def next_smallest(lst: List[int]) -> Optional[int]:\n    sl = sorted(set(lst))\n    if len(sl) < 2:\n        return None\n    return sl[1]",
        "HumanEval/91": "def is_bored(s: str) -> int:\n    sentences = re.split(r\"[.!?]\\s*\", s)\n    return sum(sentence[:2] == \"I \" for sentence in sentences if len(sentence) >= 2)",
        "HumanEval/92": "def any_int(x: Any, y: Any, z: Any) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False",
        "HumanEval/93": "def encode(message: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch1 = ch.upper() if ch.islower() else ch.lower()\n            if ch1 in vowels:\n                ch1 = chr(ord(ch1) + 2)\n            result.append(ch1)\n        else:\n            result.append(ch)\n    return \"\".join(result)",
        "HumanEval/94": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [n for n in lst if is_prime(n)]\n    if len(primes) == 0:\n        return 0\n    largest = str(max(primes))\n    return sum(int(digit) for digit in largest)",
        "HumanEval/95": "def check_dict_case(d: Dict[str, str]) -> bool:\n    if not d:\n        return False\n    return all(c.islower() for c in d.keys()) or all(c.isupper() for c in d.keys())",
        "HumanEval/96": "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n    return primes",
        "HumanEval/97": "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)",
        "HumanEval/98": "def count_upper(s: str) -> int:\n    vowels = \"AEIOU\"\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in vowels])",
        "HumanEval/99": "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)",
        "HumanEval/100": "def make_a_pile(n: int) -> List[int]:\n    return [n + 2 * i for i in range(n)]",
        "HumanEval/101": "def words_string(s: str) -> List[str]:\n    return [w for w in re.split(r\"[, ]\", s) if len(w) > 0]",
        "HumanEval/102": "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    return y - 1 if x != y else -1",
        "HumanEval/103": "def rounded_avg(n: int, m: int) -> Optional[str]:\n    if n > m:\n        return None\n    r_avg = int((m + n) / 2.0 + 0.5)\n    return bin(r_avg)[2:]",
        "HumanEval/104": "def all_digits_odd(s: str) -> bool:\n    return all(ord(digit) % 2 != 0 for digit in s)\ndef unique_digits(x: List[int]) -> List[int]:\n    return sorted([num for num in x if all_digits_odd(str(num))])",
        "HumanEval/105": "def by_length(arr: List[int]) -> List[str]:\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[x-1] for x in sorted_arr]",
        "HumanEval/106": "def f(n: int) -> List[int]:\n    nums = list(range(1, n + 1))\n    return [sum(nums[:i]) if i % 2 != 0 else reduce(lambda x, y: x * y, nums[:i], 1) for i in nums]",
        "HumanEval/107": "def is_palindrome(txt: str) -> bool:\n    return txt == txt[::-1]\ndef even_odd_palindrome(n: int) -> List[int]:\n    cnt = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(str(i)):\n            cnt[i % 2] += 1\n    return cnt",
        "HumanEval/108": "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr: List[int]) -> int:\n    return len([n for n in arr if digits_sum(n) > 0])",
        "HumanEval/109": "def move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(0, len(arr)):\n        if arr[i:] == sorted_arr[:len(arr) - i] and arr[:i] == sorted_arr[len(arr) - i:]:\n            return True\n    return False",
        "HumanEval/110": "def can_exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_cnt = len([num for num in lst1 if num % 2 != 0])\n    even_cnt = len([num for num in lst2 if num % 2 == 0])\n    return \"YES\" if even_cnt >= odd_cnt else \"NO\"",
        "HumanEval/111": "def histogram(test: str) -> Dict[str, int]:\n    freq = {}\n    words = [w for w in test.split(\" \") if len(w) > 0]\n    for w in words:\n        freq[w] = freq.get(w, 0) + 1\n    result = {}\n    if len(freq) > 0:\n        max_freq = max(freq.values())\n        for k, v in freq.items():\n            if v == max_freq:\n                result[k] = v\n    return result",
        "HumanEval/112": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\ndef reverse_delete(s: str, c: str) -> List[str]:\n    s1 = \"\".join([ch for ch in s if ch not in c])\n    return [s1, \"yes\" if is_palindrome(s1) else \"no\"]",
        "HumanEval/113": "def odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for num in lst:\n        n = sum(ord(d) % 2 == 1 for d in num)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replace(\"i\", str(n)))\n    return result",
        "HumanEval/114": "def min_sub_array_sum(nums: List[int]) -> int:\n    min_sum = 0\n    cur_sum = 0\n    for n in nums:\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    if min_sum == 0:\n        min_sum = min(nums)\n    return min_sum",
        "HumanEval/115": "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    return sum([ceil(sum(arr) / capacity) for arr in grid])",
        "HumanEval/116": "def count_ones(num: int) -> int:\n    return bin(num).count(\"1\")\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "HumanEval/117": "def select_words(s: str, n: int) -> List[str]:\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = [w for w in s.split(\" \") if len(w) > 0]\n    return [w for w in words if len([c for c in w if c.lower() in consonants]) == n]",
        "HumanEval/118": "def get_closest_vowel(word: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"",
        "HumanEval/119": "def check(s: str) -> bool:\n    depth = 0\n    for ch in s:\n        if ch == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return True if depth == 0 else False\ndef match_parens(lst: List[str]) -> str:\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) or check(s2) else \"No\"",
        "HumanEval/120": "def maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]",
        "HumanEval/121": "def solution(lst: List[int]) -> int:\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])",
        "HumanEval/122": "def add_elements(arr: List[int], k: int) -> int:\n    return sum([n for n in arr[:k] if len(str(n)) <= 2])",
        "HumanEval/123": "def get_odd_collatz(n: int) -> List[int]:\n    collatz = [1]\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    return sorted(collatz)",
        "HumanEval/124": "def valid_date(date: str) -> bool:\n    if not len(date) == 10 or not date[2] == \"-\" or not date[5] == \"-\":\n        return False\n    m = int(date[:2])\n    d = int(date[3:5])\n    if m in [1, 3, 5, 7, 8, 10, 12] and d >= 1 and d <= 31:\n        return True\n    if m in [4, 6, 9, 11] and d >= 1 and d <= 30:\n        return True\n    if m == 2 and d >= 1 and d <= 29:\n        return True\n    return False",
        "HumanEval/125": "def split_words(txt: str) -> List[str]:\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return [str(len([c for c in txt if c.islower() and ord(c) % 2 == 0]))]",
        "HumanEval/126": "def is_sorted(lst: List[int]) -> bool:\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values(), default=0) <= 2",
        "HumanEval/127": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1: List[int], interval2: List[int]) -> str:\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    return \"YES\" if length > 0 and is_prime(length) else \"NO\"",
        "HumanEval/128": "def prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    if 0 in arr:\n        return 0\n    sign = -1 if len([n for n in arr if n < 0]) % 2 == 1 else 1\n    return sign * sum([abs(n) for n in arr])",
        "HumanEval/129": "def min_path(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                min_val = min(temp)\n    result = []\n    for i in range(k):\n        result.append(1 if i % 2 == 0 else min_val)\n    return result",
        "HumanEval/130": "def tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n    seq = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(i / 2 + 1)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n    return seq",
        "HumanEval/131": "def digits(n: int) -> int:\n    odds = [int(d) for d in str(n) if int(d) % 2 == 1]\n    return reduce(lambda x, y: x * y, odds, 1) if len(odds) > 0 else 0",
        "HumanEval/132": "def is_nested(s: str) -> bool:\n    open_idx = []\n    close_idx = []\n    for i, ch in enumerate(s):\n        if ch == '[':\n            open_idx.append(i)\n        elif ch == ']':\n            close_idx.append(i)\n    close_idx.reverse()\n    cnt = 0\n    i = 0\n    l = len(close_idx)\n    for idx in open_idx:\n        if i < l and idx < close_idx[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2",
        "HumanEval/133": "def sum_squares(lst: List[float]) -> int:\n    return sum([pow(ceil(n), 2) for n in lst])",
        "HumanEval/134": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last = txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 and last[0].isalpha()",
        "HumanEval/135": "def can_arrange(arr: List[int]) -> int:\n    if len (arr) <= 1:\n        return -1\n    idx = [i for i in range(1, len(arr)) if arr[i] < arr[i - 1]]\n    return max(idx, default=-1)",
        "HumanEval/136": "def largest_smallest_integers(lst: List[int]) -> List[Optional[int]]:\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    max_neg = max(neg) if len(neg) > 0 else None\n    min_pos = min(pos) if len(pos) > 0 else None\n    return [max_neg, min_pos]",
        "HumanEval/137": "def any_to_real(o: Any) -> float:\n    if isinstance(o, str): \n        return float(o.replace(',','.'))\n    elif isinstance(o, int):\n        return float(o)\n    elif isinstance(o, float):\n        return o\n    raise RuntimeError(\"Type Error\");\ndef compare_one(a: Any, b: Any) -> Any:\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n    if a1 == b1:\n        return None\n    elif a1 > b1:\n        return a1\n    else:\n        return b1",
        "HumanEval/138": "def is_equal_to_sum_even(n: int) -> bool:\n    return n % 2 == 0 and n >= 8",
        "HumanEval/139": "def special_factorial(n: int) -> int:\n    fact = 1\n    result = 1\n    for i in range(1, n + 1):\n        fact *= i\n        result *= fact\n    return result",
        "HumanEval/140": "def fix_spaces(txt: str) -> str:\n    return re.sub(r\"\\s{3,}\", \"-\", txt).replace(\" \", \"_\")",
        "HumanEval/141": "def file_name_check(file_name: str) -> str:\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if len(lst) != 2 or not lst[1] in suf or len(lst[0]) == 0 or not lst[0][0].isalpha() or len([x for x in lst[0] if x.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"",
        "HumanEval/142": "def sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result",
        "HumanEval/143": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split(\" \")\n    return \" \".join([w for w in words if is_prime(len(w))])",
        "HumanEval/144": "def simplify(x: str, n: str) -> bool:\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = int(xs[0]) * int(ns[0])\n    den = int(xs[1]) * int(ns[1])\n    return num % den == 0",
        "HumanEval/145": "def digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)",
        "HumanEval/146": "def special_filter(nums: List[int]) -> int:\n    odds = \"13579\"\n    return len([n for n in nums if n > 10 and n % 2 == 1 and str(n)[0] in odds])",
        "HumanEval/147": "def get_max_triples(n: int) -> int:\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        c[a % 3] += 1\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) // 6",
        "HumanEval/148": "def bf(planet1: str, planet2: str) -> List[str]:\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in names or planet2 not in names:\n        return []\n    l = names.index(planet1)\n    r = names.index(planet2)\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return []\n    return names[l + 1 : r]",
        "HumanEval/149": "def sorted_list_sum(lst: List[str]) -> List[str]:\n    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result, key=lambda x: (len(x), x))",
        "HumanEval/150": "def x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, floor(sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x",
        "HumanEval/151": "def double_the_difference(lst: List[float]) -> int:\n    return sum([n * n for n in lst if n >= 0 and n % 2 == 1])",
        "HumanEval/152": "def compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(x - y) for x, y in zip(game, guess)]",
        "HumanEval/153": "def strongest_extension(class_name: str, extensions: List[str]) -> str:\n    max_s = float(\"-inf\")\n    max_ext = \"\"\n    for ext in extensions:\n        upper = len([c for c in ext if c.isupper()])\n        lower = len([c for c in ext if c.islower()])\n        s = upper - lower\n        if s > max_s:\n            max_s = s\n            max_ext = ext\n    return f\"{class_name}.{max_ext}\"",
        "HumanEval/154": "def cycpattern_check(a: str, b: str) -> bool:\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False",
        "HumanEval/155": "def even_odd_count(num: int) -> List[int]:\n    ds = str(abs(num))\n    even = len([d for d in ds if ord(d) % 2 == 0])\n    return [even, len(ds) - even]",
        "HumanEval/156": "def int_to_mini_roman(num: int) -> str:\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in range(len(values)):\n        while num >= values[i]:\n            res.append(numerals[i])\n            num -= values[i]\n    return \"\".join(res)",
        "HumanEval/157": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    s = sorted([a, b, c])\n    return  s[0] * s[0] + s[1] * s[1] == s[2] * s[2]",
        "HumanEval/158": "def find_max(words: List[str]) -> str:\n    max_cnt = 0\n    max_w = \"\"\n    for w in words:\n        cnt = len(set(w))\n        if cnt > max_cnt:\n            max_cnt = cnt\n            max_w = w\n        elif cnt == max_cnt:\n            max_w = min(max_w, w)\n    return max_w",
        "HumanEval/159": "def eat(num: int, need: int, remaining: int) -> List[int]:\n    if need <= remaining:\n        return [num + need, remaining - need]\n    else:\n        return [num + remaining, 0]",
        "HumanEval/160": "def do_algebra(operators: List[str], operands: List[int]) -> int:\n    ops = operators.copy()\n    nums = operands.copy()\n    i = len(ops) - 1\n    while i >= 0:\n        if ops[i] == \"**\":\n            nums[i] = pow(nums[i], nums[i + 1])\n            nums.pop(i + 1)\n            ops.pop(i)\n        i -= 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"*\":\n            nums[i] = nums[i] * nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"//\":\n            nums[i] = nums[i] // nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    i = 0\n    while i < len(ops):\n        if ops[i] == \"+\":\n            nums[i] = nums[i] + nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        elif ops[i] == \"-\":\n            nums[i] = nums[i] - nums[i + 1]\n            nums.pop(i + 1)\n            ops.pop(i)\n            i -= 1\n        i += 1\n    return nums[0]",
        "HumanEval/161": "def solve(s: str) -> str:\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    result = []\n    for ch in s:\n        if not ch.isalpha():\n            result.append(ch)\n        elif ch.isupper():\n            result.append(ch.lower())\n        elif ch.islower():\n            result.append(ch.upper())\n    return \"\".join(result)",
        "HumanEval/162": "def string_to_md5(txt: str) -> Optional[str]:\n    if not txt:\n        return None\n    md5_hash = hashlib.md5()\n    txt_bytes = txt.encode()\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest()\n    return md5_encoded",
        "HumanEval/163": "def generate_integers(a: int, b: int) -> List[int]:\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]"
    }
}